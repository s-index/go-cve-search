package nvd

import (
	"fmt"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMain(m *testing.M) {
	ret := m.Run()
	teardown()
	os.Exit(ret)
}

func TestFetchNVDSuccess(t *testing.T) {
	cveID := "CVE-2019-5736"
	result, err := FetchNVD(cveID)
	assert.NoError(t, err)
	assert.Equal(t, cveID, result.Cve.CVEDataMeta.ID)
}

func TestFetchNVDFail(t *testing.T) {
	cveID := "CVE-201900-5736"
	_, err := FetchNVD(cveID)
	assert.Error(t, err)
	teardown()
}

func TestFetchNVDNotFound(t *testing.T) {
	cveID := "CVE-2002-99999"
	_, err := FetchNVD(cveID)
	assert.Error(t, err)
	teardown()
}

func TestFetchNVDOldYearFail(t *testing.T) {
	cveID := "CVE-2000-5736"
	_, err := FetchNVD(cveID)
	assert.Error(t, err)
}

func TestFetchNVDFutureYearFail(t *testing.T) {
	cveID := "CVE-3000-5736"
	_, err := FetchNVD(cveID)
	assert.Error(t, err)
}

func TestNeedNVDUpdateTrue(t *testing.T) {
	pwd := os.Getenv("PWD")
	year := "2002"
	meta := `lastModifiedDate:2020-01-11T05:13:47-05:00
size:19924894
zipSize:1408391
gzSize:1408255
sha256:qwertyuiop@[
`
	MkdirFeeds(pwd)
	StoreNvdMeta(pwd, year, []byte(meta))
	needUpdate, err := NeedNVDUpdate(pwd, year)
	assert.NoError(t, err)
	assert.True(t, needUpdate)
}

func TestNeedNVDUpdateFalse(t *testing.T) {
	pwd := os.Getenv("PWD")
	year := "2003"

	MkdirFeeds(pwd)
	_, err := FetchNvdMeta(pwd, year)
	assert.NoError(t, err)
	needUpdate, err := NeedNVDUpdate(pwd, year)
	assert.NoError(t, err)
	assert.False(t, needUpdate)
}

func TestFetchNVDMeta(t *testing.T) {

	pwd := os.Getenv("PWD")
	MkdirFeeds(pwd)
	meta, err := FetchLocalNVDMeta(pwd, "2019")
	fmt.Println(meta)
	assert.Error(t, err)
}

func teardown() {
	pwd := os.Getenv("PWD")
	if _, err := os.Stat(pwd + "/feeds"); !os.IsNotExist(err) {
		if err := os.RemoveAll(pwd + "/feeds"); err != nil {
			fmt.Println(err.Error())
		}
	}
}
